logging {
  level  = "info"
  format = "logfmt"
}

discovery.kubernetes "pods" {
  role = "pod"
  selectors {
    role = "pod"
    field = "spec.nodeName=" + coalesce(env("HOSTNAME"), constants.hostname)
  }
}

discovery.relabel "ingress_logs" {
  targets = discovery.kubernetes.pods.targets

  // Target only ingress-nginx pods
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    regex         = "ingress-nginx"
    action        = "keep"
  }

  // Optional: Target only controller pods
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_component"]
    regex         = "controller"
    action        = "keep"
  }

  // Label creation - "namespace" field from "__meta_kubernetes_namespace"
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  // Label creation - "pod" field from "__meta_kubernetes_pod_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }

  // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action = "replace"
    target_label = "app"
  }

  // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
    separator = "/"
    replacement = "$1"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }

  // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action = "replace"
    target_label = "container_runtime"
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
  }

}

loki.source.kubernetes "ingress_logs" {
  targets    = discovery.relabel.ingress_logs.output
  forward_to = [loki.process.extract_ingress_fields.receiver]
}

loki.process "extract_ingress_fields" {
  forward_to = [loki.write.lokiserver.receiver]

  stage.regex {
    expression = "(?P<client_ip>\\S+) - (?P<remote_user>\\S+) \\[(?P<timestamp>[^\\]]+)\\] \"(?P<request>[^\"]*)\" (?P<status_code>\\d{3}) (?P<bytes_sent>\\d+) .*"
  }

  stage.timestamp {
    source = "timestamp"
    format = "02/Jan/2006:15:04:05 -0700"
  }

  // Optional: Create a label for HTTP status type
  stage.labels {
    values = {
      status = "status_code",
    }
  }
}

loki.write "lokiserver" {
  endpoint {
    url = "http://loki-write.loki:3100/loki/api/v1/push"
  }
    external_labels = {
    job = "kubernetes-ingress-logs",
  }
}
